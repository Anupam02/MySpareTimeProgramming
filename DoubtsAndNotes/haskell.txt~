Literate programming is a programming style where the program and its
documentation are generated from the same source.

In writing functional programs, the standard is prefix notation. In
an expression op a b, op is the function and a and b are the arguments. The convention is that function application associates to the
left , so the expression op a b is interpreted as (op a) b.

A list of guarded equations such as
ldf k n | divides k n = k
ldf k n | divides k n = n
ldf k n               = ldf (k+1) n

can be abbreviated as
ldf k n | divides k n = k
        | k^2 > n     = n
        | otherwise   = ldf (k+1) n

The hugs system has a command for checking the type of expressions.
The expression divides 5 :: Integer -> Bool is called a type judgement.Type judgement in Haskell have the form expression :: type

In Haskell it is not strictly necessary to give explicit type declarations. For instance , the definition of divides works quite well
without the type declaration, since the system can infer the type
from the definition.However, it is good programming practice to give
explicit type declarations even when this is not strictly necessary.
These type declarations are an aid to understanding, and they greatly
improve the digestibility of functional programs for human readers.

A further advantage of explicit type declarations is that they facilitate detection of programming mistakes on the basis of type errors
generated by the interpreter. You will find that many programming
errors already come to light when your program gets loaded. The fact
that your program is well typed does not entail that it is correct,
of course, but many incorrect programs do have typing mistakes.

Prelude > :type rem
rem :: Integral a => a -> a -> a

In this particular case, the type judgement gives a type scheme rather than a type.It means: if a is a type of class Integral , then
rem is of type a -> a -> a. Here a is used as a variable ranging over
types.

In Haskell , Integral is the class consisting of two types for Integer numbers, Int and Integer. The difference between Int and Integer
is that objects of type Int have fixed precision, objects of type
Integer have arbitrary precision.

Functions are operations on data-structures , constructors are the
building blocks of the data structures themselves (trees, lists,
,Booleans, and so on) ( just like data structures as a class in c++)


